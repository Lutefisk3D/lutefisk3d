include(ExternalProject)

function(encode_lib_name basename)
    if(UNIX)
        set(${basename}_LIBRARY_SHARED lib${basename}.so PARENT_SCOPE)
        set(${basename}_LIBRARY_SHARED_D lib${basename}.so PARENT_SCOPE)
        set(${basename}_LIBRARY_STATIC lib${basename}.a PARENT_SCOPE)
        set(${basename}_LIBRARY_STATIC_D lib${basename}.a PARENT_SCOPE)
        set(${basename}_LIBRARY_IMP ${basename}.so PARENT_SCOPE)
        set(${basename}_LIBRARY_IMP_D ${basename}.so PARENT_SCOPE)
    elseif(MSVC)
        set(${basename}_LIBRARY_SHARED ${basename}.dll PARENT_SCOPE)
        set(${basename}_LIBRARY_SHARED_D ${basename}d.dll PARENT_SCOPE)
        set(${basename}_LIBRARY_STATIC ${basename}.lib PARENT_SCOPE)
        set(${basename}_LIBRARY_STATIC_D ${basename}d.lib PARENT_SCOPE)
        set(${basename}_LIBRARY_IMP ${basename}.lib PARENT_SCOPE)
        set(${basename}_LIBRARY_IMP_D ${basename}d.lib PARENT_SCOPE)
    elseif(MINGW)
        set(${basename}_LIBRARY_STATIC lib${basename}.a PARENT_SCOPE)
        set(${basename}_LIBRARY_STATIC_D lib${basename}.a PARENT_SCOPE)
        set(${basename}_LIBRARY_SHARED lib${basename}.dll PARENT_SCOPE)
        set(${basename}_LIBRARY_SHARED_D lib${basename}.dll PARENT_SCOPE)
        set(${basename}_LIBRARY_IMP lib${basename}.dll PARENT_SCOPE)
        set(${basename}_LIBRARY_IMP_D lib${basename}.dll PARENT_SCOPE)
    endif()
endfunction()
function(libname tgt basename)
    encode_lib_name(${basename})
    set(${tgt}_LIBRARY_STATIC ${ThirdParty_Install_Dir}/lib/${${basename}_LIBRARY_STATIC} PARENT_SCOPE)
    set(${tgt}_LIBRARY_STATIC_D ${ThirdParty_Install_Dir}/lib/${${basename}_LIBRARY_STATIC_D} PARENT_SCOPE)
    set(${tgt}_LIBRARY_SHARED ${ThirdParty_Install_Dir}/lib/${${basename}_LIBRARY_SHARED} PARENT_SCOPE)
    set(${tgt}_LIBRARY_SHARED_D ${ThirdParty_Install_Dir}/lib/${${basename}_LIBRARY_SHARED_D} PARENT_SCOPE)
    set(${tgt}_LIBRARY_IMP ${ThirdParty_Install_Dir}/lib/${${basename}_LIBRARY_IMP} PARENT_SCOPE)
    set(${tgt}_LIBRARY_IMP_D ${ThirdParty_Install_Dir}/lib/${${basename}_LIBRARY_IMP_D} PARENT_SCOPE)
endfunction()

macro(set_shared_lib_properties basename)
    SET_PROPERTY(TARGET ${basename}_IMP APPEND PROPERTY IMPORTED_LOCATION ${${basename}_LIBRARY_SHARED} )
    SET_PROPERTY(TARGET ${basename}_IMP APPEND PROPERTY IMPORTED_LOCATION_DEBUG ${${basename}_LIBRARY_SHARED_D} )
    SET_PROPERTY(TARGET ${basename}_IMP APPEND PROPERTY IMPORTED_LOCATION_RELEASE ${${basename}_LIBRARY_SHARED} )
    SET_PROPERTY(TARGET ${basename}_IMP APPEND PROPERTY IMPORTED_IMPLIB ${${basename}_LIBRARY_IMP} )
    SET_PROPERTY(TARGET ${basename}_IMP APPEND PROPERTY IMPORTED_IMPLIB_RELEASE ${${basename}_LIBRARY_IMP} )
    SET_PROPERTY(TARGET ${basename}_IMP APPEND PROPERTY IMPORTED_IMPLIB_DEBUG ${${basename}_LIBRARY_IMP_D} )
endmacro()
macro(set_static_lib_properties basename)
    SET_PROPERTY(TARGET ${basename}_IMP APPEND PROPERTY IMPORTED_LOCATION ${${basename}_LIBRARY_STATIC} )
    SET_PROPERTY(TARGET ${basename}_IMP APPEND PROPERTY IMPORTED_LOCATION_DEBUG ${${basename}_LIBRARY_STATIC_D} )
    SET_PROPERTY(TARGET ${basename}_IMP APPEND PROPERTY IMPORTED_LOCATION_RELEASE ${${basename}_LIBRARY_STATIC} )
endmacro()
macro(add_3rdparty_subdir name)
    add_subdirectory(${name})
    set_target_properties(${name} PROPERTIES FOLDER ThirdParty)
endmacro()
link_directories(${ThirdParty_Install_Dir}/lib)

#include(ExternalProject_CEREAL.cmake)
#add_subdirectory(LibCpuId)
#add_subdirectory(EnTT)
add_3rdparty_subdir(PugiXml)
add_3rdparty_subdir(LZ4)
add_3rdparty_subdir(rapidjson)

# *_BuiltFile is setting up the location of the built library - needed for ninja generator
if(NOT UNIX)
        message(ERROR "TODO: Verify the lib paths for non UNIX builds")
endif()
set(ThirdParty_Install_Dir ${PROJECT_BINARY_DIR}/ThirdParty_Builds)
if(NOT LUTEFISK3D_HEADLESS)
    include(ExternalProject_GLFW3.cmake)
    include(ExternalProject_GLEW.cmake)
endif()

if(LUTEFISK3D_NAVIGATION)
    add_3rdparty_subdir(Recast)
    add_3rdparty_subdir(Detour)
    add_3rdparty_subdir(DetourTileCache)
    add_3rdparty_subdir(DetourCrowd)
endif()
if(LUTEFISK3D_SOUND)
    add_3rdparty_subdir(OpenAL)
#   include(ExternalProject_OpenAL.cmake)
endif()
add_3rdparty_subdir(STB)
add_subdirectory(IconFontCppHeaders)
if(LUTEFISK3D_SYSTEMUI)
    add_3rdparty_subdir(ImGui)
endif()
if(LUTEFISK3D_PROFILING)
    add_3rdparty_subdir(easy_profiler)
endif()
if(LUTEFISK3D_PLUGINS)
    add_subdirectory(cr)
endif()
if (LUTEFISK3D_IK)
    add_3rdparty_subdir (ik)
    set_property(TARGET ik PROPERTY POSITION_INDEPENDENT_CODE ON)
endif ()
if(LUTEFISK3D_NETWORK)
    if(UNIX OR MINGW)
        set(KNET_BuiltFile ${ThirdParty_Install_Dir}/lib/libkNet.a)
    else()
        set(KNET_BuiltFile ${ThirdParty_Install_Dir}/lib/kNet.lib)
    endif()
    ExternalProject_Add(
        kNet
        DOWNLOAD_COMMAND ""
        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/kNet
        UPDATE_COMMAND ""
        CMAKE_ARGS -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_TOOLCHAIN_FILE:PATH=${CMAKE_TOOLCHAIN_FILE} -DCMAKE_INSTALL_PREFIX:PATH=${ThirdParty_Install_Dir} -DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER} -DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}
        INSTALL_DIR ${ThirdParty_Install_Dir}/
        BUILD_BYPRODUCTS ${KNET_BuiltFile}
    )
    ADD_LIBRARY(kNet_LIB STATIC IMPORTED GLOBAL)
    add_dependencies(kNet_LIB kNet)
    SET_TARGET_PROPERTIES(kNet_LIB PROPERTIES IMPORTED_LOCATION ${KNET_BuiltFile})

endif()
if(LUTEFISK3D_UI OR LUTEFISK3D_SYSTEMUI)
    add_3rdparty_subdir(FreeType)
endif()
if(LUTEFISK3D_2D)
    add_3rdparty_subdir(Box2D)
endif()
if (LUTEFISK3D_TOOLS)
    add_3rdparty_subdir(Assimp)
endif ()
if(LUTEFISK3D_PHYSICS)
    set(USE_MSVC_RUNTIME_LIBRARY_DLL TRUE)
    add_subdirectory(Bullet)
    set_target_properties(BulletCollision PROPERTIES FOLDER ThirdParty/Bullet)
    set_target_properties(BulletDynamics PROPERTIES FOLDER ThirdParty/Bullet)
    set_target_properties(BulletSoftBody PROPERTIES FOLDER ThirdParty/Bullet)
    set_target_properties(LinearMath PROPERTIES FOLDER ThirdParty/Bullet)
    add_3rdparty_subdir(StanHull)
endif()

