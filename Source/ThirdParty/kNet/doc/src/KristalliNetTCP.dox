/**
\page KristalliTCP kNet Transport over TCP
  
\section KristalliTCPMain kNet Transport over TCP
  
It is possible to run kNet connections on top of TCP. This has the following advantages over using UDP:
<ul>
<li>A restricting firewall may block UDP connections, which makes kNet over UDP impossible.</li>
<li>A poor ISP may consider UDP communication as P2P traffic and serve it with lower priority than TCP, throttle the maximum bandwidth, or even scramble it.</li>
<li>Traditional TCP congestion control is applied, which is the method most routers are optimized for.</li>
</ul>

However, using kNet in TCP mode has the following limitations:
<ul>
<li>No support for out-of-order messaging. This results in increased latency in the presence of packet loss.</li>
<li>No support for unreliable datagrams, which makes TCP a poor fit for streaming lossy real-time content.</li>
<li>Message prioritization is more difficult since the outbound TCP send queue cannot be modified after data is submitted to it.</li>
<li>Because of the same reason as above, no support for late data choice.</li>
<li>No support for multiple virtual communication channels, or other message dependency modelling methods.</li>
<li>The server cannot operate in stealth mode.</li>
</ul>

kNet over TCP implements RTT estimation and fragmented transfers in a similar way to when using kNet over UDP. However, these two transport methods are not equivalent in features. For example, kNet over TCP does not support UDP features such as <b>InOrder Messages</b>, <b>Flow Control</b> or <b>Session Management</b>.

\subsection KristalliTCPFormat TCP Stream Byte Format

The byte format used for serializing messages in the TCP stream differs somewhat from the UDP counterpart and is very straightforward. The data if formed by simply concatenating the following <b>Message Block</b> fields one after another until the connection is closed. There are no headers or data bytes at the start of the stream or in between the Message blocks.

<!-- u8                 MessageFlags. -->

<div style="background-color: #E0E0E0; padding: 5px; border: solid 1px black;">
<b>Message Block Format.</b>
<pre>
VLE-1.7/1.7/16     ContentLength. Specifies the length in bytes of the MessageID and Payload fields.
VLE-1.7/1.7/16     MessageID.
.Payload.          The actual data of the message.
</pre>
</div>
    
To understand VLE-encoding, refer to \ref KristalliUDPVLE "".

\subsection KristalliTCPConnection Connection Control Messages

When using kNet over TCP, the messages 
<span style="background-color: #D5D5FF; border-bottom: dashed 1px blue;">\ref PingRequestMsg "PingRequest"</span> and 
<span style="background-color: #D5D5FF; border-bottom: dashed 1px blue;">\ref PingReplyMsg "PingReply"</span> are used in the same manner as specified by \ref KristalliUDPRTT "". The messages
<span style="background-color: #D5D5FF; border-bottom: dashed 1px blue;">\ref FlowControlRequestMsg "FlowControlRequest"</span>,
<span style="background-color: #D5D5FF; border-bottom: dashed 1px blue;">\ref PacketAckMsg "PacketAck"</span>,
<span style="background-color: #D5D5FF; border-bottom: dashed 1px blue;">\ref DisconnectMsg "Disconnect"</span>,
<span style="background-color: #D5D5FF; border-bottom: dashed 1px blue;">\ref DisconnectAckMsg "DisconnectAck"</span>,
<span style="background-color: #D5D5FF; border-bottom: dashed 1px blue;">\ref ConnectSynMsg "ConnectSyn"</span>,
<span style="background-color: #D5D5FF; border-bottom: dashed 1px blue;">\ref ConnectSynAckMsg "ConnectSynAck"</span> and
<span style="background-color: #D5D5FF; border-bottom: dashed 1px blue;">\ref ConnectAckMsg "ConnectAck"</span> are not used, but the MessageID values associated with them are still reserved for other use. 

<!--
subsection KristalliTCPFragments Fragmented Transfers

In order to avoid a single large message transfer from blocking the whole stream until the transfer is completed, the TCP mode also supports fragmented transfers. This allows smaller high priority messages to be injected in between the fragments of a larger (low priority) transfer, thus allowing the application to manage at least to some level the potential latency issues caused by large message transfers. Still, for this feature to be useful, the application needs to be careful about how it handles its outbound TCP send queue. 

todo Describe the fragmented transfer bits of the MessageFlags field. 
-->

*/
